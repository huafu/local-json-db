// Generated by CoffeeScript 1.8.0
var Class, CoreObject, EventEmitter, utils,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

EventEmitter = require('events').EventEmitter;

utils = require('./utils');

Class = null;

CoreObject = (function(_super) {
  __extends(CoreObject, _super);

  function CoreObject() {
    return CoreObject.__super__.constructor.apply(this, arguments);
  }

  CoreObject.className = function() {
    return this.toString().match(/function\s+([a-zA-Z0-9_]+)/)[1];
  };

  CoreObject.log = function() {
    var items, level;
    level = arguments[0], items = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (level !== 'debug' && level !== 'notice' && level !== 'info' && level !== 'warning' && level !== 'error' && level !== 'danger' && level !== 'fatal') {
      items.unshift(level);
      level = 'debug';
    }
    utils.log.apply(utils, ["[" + (this.className()) + (arguments.callee.caller === this.prototype.log ? '#' : '.') + "log][" + level + "]"].concat(__slice.call(items)));
    return this;
  };

  CoreObject.assert = function(expression, message) {
    if (!expression) {
      utils["throw"]("[" + (this.className()) + (arguments.callee.caller === this.prototype.assert ? '#' : '.') + "assert] " + message);
    }
    return this;
  };

  CoreObject.lockProperties = function() {
    var name, names, _i, _len;
    names = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = names.length; _i < _len; _i++) {
      name = names[_i];
      utils.lock(this, name);
    }
    return this;
  };

  CoreObject.prototype.className = function() {
    return this.constructor.className();
  };

  CoreObject.prototype.log = function() {
    var items, level, _ref;
    level = arguments[0], items = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    (_ref = this.constructor).log.apply(_ref, arguments);
    return this;
  };

  CoreObject.prototype.assert = function(expression, message) {
    var _ref;
    (_ref = this.constructor).assert.apply(_ref, arguments);
    return this;
  };

  CoreObject.prototype.lockProperties = function() {
    var name, names, _i, _len;
    names = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = names.length; _i < _len; _i++) {
      name = names[_i];
      utils.lock(this, name);
    }
    return this;
  };

  CoreObject.prototype.uuid = function() {
    this.assert(this._uuid && typeof this._uuid === 'string', "undefined " + (this.className()) + "#_uuid or not a string");
    return this._uuid;
  };

  CoreObject.prototype.identify = function() {
    return "[object " + (this.className()) + "<" + (this.uuid()) + ">]";
  };

  CoreObject.prototype.destroy = function() {};

  return CoreObject;

})(EventEmitter);

module.exports = Class = CoreObject;
