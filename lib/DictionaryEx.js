// Generated by CoffeeScript 1.8.0
var Class, Dictionary, DictionaryEx, utils,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

utils = require('./utils');

Dictionary = require('./Dictionary');

Class = null;

DictionaryEx = (function(_super) {
  __extends(DictionaryEx, _super);

  DictionaryEx.prototype._metadata = null;

  DictionaryEx.prototype._deleted = null;

  function DictionaryEx(data, options) {
    if (data == null) {
      data = {};
    }
    if (options == null) {
      options = {};
    }
    this._metadata = [];
    this._deleted = new Dictionary({}, options);
    this.lockProperties('_metadata', '_deleted');
    DictionaryEx.__super__.constructor.apply(this, arguments);
  }

  DictionaryEx.prototype.clear = function(withDeleted) {
    if (withDeleted == null) {
      withDeleted = true;
    }
    if (withDeleted) {
      this.deletedClear();
    }
    this._clearing = true;
    DictionaryEx.__super__.clear.apply(this, arguments);
    delete this._clearing;
    return this;
  };

  DictionaryEx.prototype.count = function(withDeleted) {
    var res;
    if (withDeleted == null) {
      withDeleted = false;
    }
    res = DictionaryEx.__super__.count.call(this);
    if (withDeleted) {
      res += this._deleted.length;
    }
    return res;
  };

  DictionaryEx.prototype.deletedCount = function() {
    return this._deleted.count();
  };

  DictionaryEx.prototype.deletedClear = function() {
    this._deleted.clear();
    return this;
  };

  DictionaryEx.prototype.deletedKeys = function() {
    return this._deleted.keys();
  };

  DictionaryEx.prototype.deletedUnset = function(key) {
    return this._deleted.unset(key);
  };

  DictionaryEx.prototype.deletedExists = function(key) {
    return this._deleted.exists(key);
  };

  DictionaryEx.prototype.deleted = function(key, deletedAt) {
    var k;
    if (deletedAt == null) {
      deletedAt = null;
    }
    k = this._stringifyKey(key);
    this.assert(__indexOf.call(this._keys, k) < 0 && __indexOf.call(this._deleted._keys, k) < 0, "entry already exists, use `deletedAt()` instead");
    return this._deleted.set(k, {
      deletedAt: this._parseDate(deletedAt)
    });
  };

  DictionaryEx.prototype.entryForKey = function(key) {
    var deleted, e;
    if ((e = DictionaryEx.__super__.entryForKey.apply(this, arguments)).index === -1 && (deleted = this._deleted.entryForKey(key)).index !== -1) {
      e.metadata = deleted.value;
    }
    return e;
  };

  DictionaryEx.prototype.createdAt = function(key, date) {
    var e, _ref;
    e = this.entryForKey(key);
    if (arguments.length === 2) {
      this.assert(e.index >= 0, "no entry for key " + key);
      return e.metadata.createdAt = this._parseDate(date);
    } else {
      return (_ref = e.metadata) != null ? _ref.createdAt : void 0;
    }
  };

  DictionaryEx.prototype.updatedAt = function(key, date) {
    var e, _ref;
    e = this.entryForKey(key);
    if (arguments.length === 2) {
      this.assert(e.index >= 0, "no entry for key " + key);
      return e.metadata.updatedAt = this._parseDate(date);
    } else {
      return (_ref = e.metadata) != null ? _ref.updatedAt : void 0;
    }
  };

  DictionaryEx.prototype.deletedAt = function(key, date) {
    var e, _ref;
    e = this.entryForKey(key);
    if (arguments.length === 2) {
      if (e.index >= 0) {
        return this._unset(e.index, true, date).metadata.deletedAt;
      } else {
        this.assert(e.metadata, "no entry for key " + key);
        return e.metadata.deletedAt = this._parseDate(date);
      }
    } else {
      return (_ref = e.metadata) != null ? _ref.deletedAt : void 0;
    }
  };

  DictionaryEx.prototype.toKeyValuePairs = function(keys, _complete) {
    if (keys == null) {
      keys = {};
    }
    if (_complete == null) {
      _complete = function() {};
    }
    keys = utils.defaults({}, keys, {
      metadata: 'metadata'
    });
    return DictionaryEx.__super__.toKeyValuePairs.call(this, keys, (function(_this) {
      return function(o, i) {
        if (keys.metadata) {
          o[keys.metadata] = _this._metadata[i];
        }
        return _complete(o, i);
      };
    })(this));
  };

  DictionaryEx.prototype.deletedMetadata = function(asObject) {
    if (asObject == null) {
      asObject = false;
    }
    if (asObject) {
      return this._deleted["export"]();
    } else {
      return this._deleted.toKeyValuePairs({
        value: 'metadata'
      });
    }
  };

  DictionaryEx.prototype._unset = function(index, emitEvent, _now) {
    var de, e;
    if (emitEvent == null) {
      emitEvent = true;
    }
    if (_now == null) {
      _now = null;
    }
    e = DictionaryEx.__super__._unset.call(this, index, false);
    if (e.index >= 0) {
      if (this._clearing) {
        this._metadata.splice(e.index, 1);
        e.metadata.deletedAt = this._parseDate(_now);
      } else {
        de = this._deleted.set(e.key, {
          deletedAt: this._parseDate(_now)
        });
        this._metadata.splice(e.index, 1);
        Object.defineProperty(e.metadata, 'deletedAt', {
          get: function() {
            return de.value.deletedAt;
          },
          set: (function(_this) {
            return function(date) {
              return de.value.deletedAt = _this._parseDate(date);
            };
          })(this)
        });
      }
      if (emitEvent) {
        this.emit('entry.unset', e);
      }
    }
    return e;
  };

  DictionaryEx.prototype._set = function(index, key, value, emitEvent, _now) {
    var e, ts;
    if (emitEvent == null) {
      emitEvent = true;
    }
    if (_now == null) {
      _now = null;
    }
    ts = this._parseDate(_now);
    e = DictionaryEx.__super__._set.call(this, index, key, value, false);
    if (e.metadata) {
      e.metadata.updatedAt = ts;
    } else {
      this._metadata[e.index] = e.metadata = {
        createdAt: ts,
        updatedAt: ts
      };
      this._deleted.unset(key);
    }
    if (emitEvent) {
      this.emit('entry.set', e);
    }
    return e;
  };

  DictionaryEx.prototype._entryForIndex = function(index) {
    var e;
    e = DictionaryEx.__super__._entryForIndex.call(this, index);
    if (e.index !== -1) {
      e.metadata = this._metadata[e.index];
    }
    return e;
  };

  DictionaryEx.prototype._parseDate = function(date) {
    if (date === null) {
      return Date.now();
    } else if (utils.isNumber(date)) {
      return Math.round(date);
    } else if (utils.isDate(date)) {
      return date.getTime();
    } else {
      return (new Date(date)).getTime();
    }
  };

  return DictionaryEx;

})(Dictionary);

module.exports = Class = DictionaryEx;
