// Generated by CoffeeScript 1.8.0
var Class, CoreObject, Model, RecordStore, utils,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

utils = require('./utils');

CoreObject = require('./CoreObject');

RecordStore = require('./RecordStore');

Class = null;

Model = (function(_super) {
  __extends(Model, _super);

  Model.prototype._store = null;

  Model.prototype._name = null;

  Model.prototype._database = null;

  Model.prototype._eventListeners = null;

  function Model(database, name, store) {
    if (name != null) {
      this._name = Class._modelName(name);
    } else {
      this._name = null;
    }
    if (database != null) {
      this.assert(database instanceof Class._databaseClass(), "given database isn't an instance of " + (Class._databaseClass().className()));
      this._database = database;
    } else {
      this._database = null;
    }
    if (store != null) {
      this.assert(store instanceof RecordStore, "given store must be an instance of " + (RecordStore.className()));
      this._store = store;
    } else {
      this._store = new RecordStore();
    }
    this.setMaxListeners(Infinity);
    this._attachEvents();
  }

  Model.prototype.create = function(record) {
    var _ref;
    return (_ref = this._store).createRecord.apply(_ref, arguments);
  };

  Model.prototype.update = function(id, record) {
    var _ref;
    return (_ref = this._store).updateRecord.apply(_ref, arguments);
  };

  Model.prototype["delete"] = function(id) {
    var _ref;
    return (_ref = this._store).deleteRecord.apply(_ref, arguments);
  };

  Model.prototype.find = function(id) {
    var _ref;
    return (_ref = this._store).readRecord.apply(_ref, arguments);
  };

  Model.prototype.findMany = function() {
    var id, ids, record, _i, _len, _results;
    ids = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (ids.length === 1 && utils.isArray(ids[0])) {
      ids = ids[0];
    }
    ids = utils.uniq(ids);
    _results = [];
    for (_i = 0, _len = ids.length; _i < _len; _i++) {
      id = ids[_i];
      if ((record = this._store.readRecord(id))) {
        _results.push(record);
      }
    }
    return _results;
  };

  Model.prototype.findAll = function() {
    return this._store.readAllRecords();
  };

  Model.prototype.findQuery = function(filter, thisArg) {
    return utils.filter(this._store.readAllRecords(), filter, thisArg);
  };

  Model.prototype.count = function() {
    return this._store.countRecords();
  };

  Model.prototype.destroy = function() {
    this._detachEvents();
    this._store = null;
    this._database = null;
    Object.freeze(this);
    return Model.__super__.destroy.apply(this, arguments);
  };

  Model.prototype._attachEvents = function() {
    var k, v, _ref;
    if (!this._eventListeners) {
      this._eventListeners = {
        created: this._recordCreated.bind(this),
        updated: this._recordUpdated.bind(this),
        deleted: this._recordDeleted.bind(this)
      };
      _ref = this._eventListeners;
      for (k in _ref) {
        v = _ref[k];
        this._store.on("record." + k, v);
      }
    }
    return this;
  };

  Model.prototype._detachEvents = function() {
    var k, v, _ref;
    if (this._eventListeners) {
      _ref = this._eventListeners;
      for (k in _ref) {
        v = _ref[k];
        this._store.removeListener("record." + k, v);
      }
      this._eventListeners = null;
    }
    return this;
  };

  Model.prototype._recordCreated = function(record) {
    return this._emit('created', record);
  };

  Model.prototype._recordUpdated = function(record) {
    this._emit("record:" + (this._name ? "" + this._name : '-') + "#" + record.id, record);
    return this._emit('updated', record);
  };

  Model.prototype._recordDeleted = function(record) {
    this._emit("record:" + (this._name ? "" + this._name : '-') + "#" + record.id, null);
    return this._emit('deleted', record);
  };

  Model.prototype._emit = function() {
    var args, event, _ref;
    event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (this._database) {
      return (_ref = this._database).emit.apply(_ref, [event].concat(__slice.call(args)));
    } else {
      return this.emit.apply(this, [event].concat(__slice.call(args)));
    }
  };

  Model.assertValidModelName = function(name) {
    this.assert(utils.isString(name) && name.length, "the model name must be a string of at least on char");
    return this;
  };

  Model._modelName = function(name) {
    this.assertValidModelName(name);
    return utils.camelCase(utils.singularize(name));
  };

  Model._databaseClass = function() {
    return require('./Database');
  };

  return Model;

})(CoreObject);

module.exports = Class = Model;
