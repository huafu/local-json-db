// Generated by CoffeeScript 1.8.0
var Class, CoreObject, Dictionary, utils,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

utils = require('./utils');

CoreObject = require('./CoreObject');

Class = null;

Dictionary = (function(_super) {
  __extends(Dictionary, _super);

  Dictionary.prototype._keys = null;

  Dictionary.prototype._values = null;

  Dictionary.prototype._stringifyKeys = null;

  Dictionary.prototype._undefinedUnsets = null;

  Dictionary.prototype.length = null;

  function Dictionary(data, options) {
    if (data == null) {
      data = {};
    }
    if (options == null) {
      options = {};
    }
    if (!(this instanceof Class)) {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Class, arguments, function(){});
    }
    this._stringifyKeys = Boolean(options.stringifyKeys);
    this._undefinedUnsets = Boolean(options.undefinedUnsets);
    this._keys = [];
    this._values = [];
    this.lockProperties('_stringifyKeys', '_undefinedUnsets', '_keys', '_values');
    this["import"](data);
    this;
  }

  Dictionary.prototype.indexOfKey = function(key) {
    return this.entryForKey(key).index;
  };

  Dictionary.prototype.indexOfValue = function(value, multiple) {
    var e, _i, _len, _ref, _results;
    if (multiple == null) {
      multiple = false;
    }
    if (multiple) {
      _ref = this.entriesForValue(value);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        _results.push(e.index);
      }
      return _results;
    } else {
      return this.entryForValue(value).index;
    }
  };

  Dictionary.prototype.clear = function() {
    while (this._keys.length) {
      this._unset(this._keys.length - 1);
    }
    return this;
  };

  Dictionary.prototype["import"] = function(data, clear) {
    var key, val;
    if (clear == null) {
      clear = false;
    }
    if (clear) {
      this.clear();
    }
    for (key in data) {
      if (!__hasProp.call(data, key)) continue;
      val = data[key];
      this.set(key, val);
    }
    return this;
  };

  Dictionary.prototype["export"] = function() {
    var i, k, res, _i, _len, _ref;
    this.assert(this._stringifyKeys, "cannot export a dictionary to a bare object if the keys aren't of type string");
    res = {};
    _ref = this._keys;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      k = _ref[i];
      res[k] = this._values[i];
    }
    return res;
  };

  Dictionary.prototype.toKeyValuePairs = function(keys, _complete) {
    var i, k, o, res, _i, _len, _ref;
    if (keys == null) {
      keys = {};
    }
    if (_complete == null) {
      _complete = function() {};
    }
    keys = utils.defaults({}, keys, {
      key: 'key',
      value: 'value',
      index: false
    });
    res = [];
    _ref = this._keys;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      k = _ref[i];
      o = {};
      if (keys.index) {
        o[keys.index] = i;
      }
      if (keys.key) {
        o[keys.key] = k;
      }
      if (keys.value) {
        o[keys.value] = this._values[i];
      }
      _complete(o, i);
      res.push(o);
    }
    return res;
  };

  Dictionary.prototype.keys = function() {
    return this._keys.slice();
  };

  Dictionary.prototype.values = function() {
    return this._values.slice();
  };

  Dictionary.prototype.count = function() {
    return this._keys.length;
  };

  Dictionary.prototype.set = function(key, value) {
    var del, e;
    e = this.entryForKey(key);
    del = value === void 0 && this._undefinedUnsets;
    if (del) {
      if (e.index !== -1) {
        e = this._unset(e.index);
      }
    } else {
      e = this._set(e.index, key, value);
    }
    return e;
  };

  Dictionary.prototype.get = function(key) {
    return this.entryForKey(key).value;
  };

  Dictionary.prototype.exists = function(key) {
    return Boolean(this.entryForKey(key).index >= 0);
  };

  Dictionary.prototype.contains = function(value) {
    return Boolean(this.entryForValue(value).index >= 0);
  };

  Dictionary.prototype.unset = function(key) {
    return this._unset(this.entryForKey(key).index);
  };

  Dictionary.prototype.map = function(callback) {
    var cb, i, res, _i, _ref;
    if (utils.isString(callback)) {
      cb = function(e) {
        var _ref;
        return (_ref = e.value) != null ? _ref[callback] : void 0;
      };
    } else {
      cb = callback;
    }
    res = [];
    for (i = _i = 0, _ref = this._keys.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      res.push(cb(this._entryForIndex(i), this));
    }
    return res;
  };

  Dictionary.prototype.collect = function(callback) {
    var cb, d, i, res, _i, _ref;
    if (utils.isString(callback)) {
      cb = function(e) {
        var _ref;
        return (_ref = e.value) != null ? _ref[callback] : void 0;
      };
    } else {
      cb = callback;
    }
    res = [];
    for (i = _i = 0, _ref = this._keys.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if ((d = cb(this._entryForIndex(i), this)) !== void 0) {
        res.push(d);
      }
    }
    return res;
  };

  Dictionary.prototype.entryForKey = function(key) {
    return this._entryForIndex(this._keys.indexOf(this._stringifyKey(key)));
  };

  Dictionary.prototype.entryForValue = function(value) {
    return this._entryForIndex(this._values.indexOf(value));
  };

  Dictionary.prototype.entriesForValue = function(value) {
    var i, v, _i, _len, _ref, _results;
    _ref = this._values;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      v = _ref[i];
      if (v === value) {
        _results.push(this._entryForIndex(i));
      }
    }
    return _results;
  };

  Dictionary.prototype.stringifyKey = function(key) {
    return "" + key;
  };

  Dictionary.prototype.toJSON = function() {
    return this["export"]();
  };

  Dictionary.prototype._entryForIndex = function(index) {
    var e, key, value;
    if (index >= 0) {
      key = this._keys[index];
      value = this._values[index];
      e = {
        index: index,
        key: key,
        value: value
      };
    } else {
      index = -1;
      e = {
        index: index
      };
    }
    return e;
  };

  Dictionary.prototype._unset = function(index, emitEvent) {
    var e;
    if (emitEvent == null) {
      emitEvent = true;
    }
    e = this._entryForIndex(index);
    if (e.index >= 0) {
      this._keys.splice(e.index, 1);
      this._values.splice(e.index, 1);
      if (emitEvent) {
        this.emit('entry.unset', e);
      }
    }
    return e;
  };

  Dictionary.prototype._set = function(index, key, value, emitEvent) {
    var entry;
    if (emitEvent == null) {
      emitEvent = true;
    }
    if (index === -1) {
      index = this._keys.length;
      this._keys[index] = this._stringifyKey(key);
    }
    this._values[index] = value;
    entry = this._entryForIndex(index);
    if (emitEvent) {
      this.emit('entry.set', entry);
    }
    return entry;
  };

  Dictionary.prototype._stringifyKey = function(key) {
    if (this._stringifyKeys && typeof key !== 'string') {
      return this.stringifyKey(key);
    } else {
      return key;
    }
  };

  return Dictionary;

})(CoreObject);

Object.defineProperties(Dictionary.prototype, {
  length: {
    configurable: false,
    get: (function() {
      return this.count();
    }),
    set: (function() {
      throw new Error("length property is read-only");
    })
  }
});

module.exports = Class = Dictionary;
