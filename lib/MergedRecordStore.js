// Generated by CoffeeScript 1.8.0
var Class, CoreObject, MergedRecordStore, RecordStore, utils,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

utils = require('./utils');

CoreObject = require('./CoreObject');

RecordStore = require('./RecordStore');

Class = null;

MergedRecordStore = (function(_super) {
  __extends(MergedRecordStore, _super);

  MergedRecordStore.prototype._layers = null;

  MergedRecordStore.prototype._eventsNamespace = null;

  MergedRecordStore.prototype._globalEventsNamespace = null;

  function MergedRecordStore(records, config) {
    var coreLayer;
    if (records == null) {
      records = [];
    }
    if (config == null) {
      config = {};
    }
    this._config = utils.defaults({}, config, {
      createdAtKey: false,
      updatedAtKey: false,
      eventsNamespace: 'record'
    });
    if (!this._config.deletedAtKey) {
      this._config.deletedAtKey = '__deleted';
    }
    this._globalEventsNamespace = this._config.eventsNamespace;
    this._eventsEmitter = this;
    delete this._config.eventsNamespace;
    this._layers = [];
    this._lastId = 0;
    this.addLayer(records, {});
    coreLayer = this._layers[0];
    this._records = coreLayer._records;
    this._eventsNamespace = coreLayer._eventsNamespace;
    this._readOnly = coreLayer._readOnly;
    this.lockProperties('_layers', '_eventsNamespace', '_records', '_config', '_globalEventsNamespace', '_readOnly');
  }

  MergedRecordStore.prototype.addLayer = function(records, config) {
    var conf, rs, _ref;
    if (records == null) {
      records = [];
    }
    if (config == null) {
      config = {};
    }
    conf = utils.defaults({}, this._config, config, {
      eventsNamespace: "layer" + this._layers.length + "." + ((_ref = config.eventsNamespace) != null ? _ref : this._globalEventsNamespace),
      eventsEmitter: this
    });
    if (this._layers.length) {
      conf.readOnly = true;
    }
    this._layers.push((rs = new RecordStore(records, conf)));
    this._lastId = Math.max(this._lastId, rs.lastAutoId());
    return rs;
  };

  MergedRecordStore.prototype.removeLayer = function(index) {
    this.assert(utils.isNumber(index) && (this._layers[index] != null), "invalid layer index: " + index);
    this.assert(index !== 0, "the base layer (with index 0) can't be removed");
    return this._layers.splice(index, 1).pop();
  };

  MergedRecordStore.prototype.layers = function(index) {
    if (arguments.length > 0) {
      this.assert(utils.isNumber(index) && (this._layers[index] != null), "invalid layer index: " + index);
      return this._layers[index];
    } else {
      return this._layers.slice();
    }
  };

  MergedRecordStore.prototype.idExists = function(id, includeDeleted) {
    var has, layer, res, _i, _len, _ref;
    if (includeDeleted == null) {
      includeDeleted = false;
    }
    this.assertValidId(id);
    res = false;
    _ref = this._layers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      layer = _ref[_i];
      if ((has = layer.idExists(id, true))) {
        if (has.isDeleted) {
          res = Boolean(includeDeleted);
          break;
        } else {
          res = true;
        }
      }
    }
    return res;
  };

  MergedRecordStore.prototype.createRecord = function(record) {
    if (record == null) {
      record = {};
    }
    record = MergedRecordStore.__super__.createRecord.apply(this, arguments);
    this.emit("" + this._globalEventsNamespace + ".created", record);
    return record;
  };

  MergedRecordStore.prototype.updateRecord = function(id, record) {
    record = MergedRecordStore.__super__.updateRecord.apply(this, arguments);
    this.emit("" + this._globalEventsNamespace + ".updated", record);
    return record;
  };

  MergedRecordStore.prototype.deleteRecord = function(id) {
    var record;
    record = MergedRecordStore.__super__.deleteRecord.call(this, id);
    this.emit("" + this._globalEventsNamespace + ".deleted", record);
    return record;
  };

  MergedRecordStore.prototype.countRecords = function() {
    return this.ids().length;
  };

  MergedRecordStore.prototype.importRecords = function(records) {
    var backup, res;
    backup = this.idExists;
    this.idExists = RecordStore.prototype.idExists;
    res = MergedRecordStore.__super__.importRecords.call(this, records);
    this.idExists = backup;
    return res;
  };

  MergedRecordStore.prototype["export"] = function(full) {
    if (full == null) {
      full = false;
    }
    return {
      config: this.exportConfig(),
      records: this.exportRecords(full)
    };
  };

  MergedRecordStore.prototype.exportRecords = function(full) {
    var backup, res;
    if (full) {
      return MergedRecordStore.__super__.exportRecords.call(this);
    } else {
      backup = this.ids;
      this.ids = RecordStore.prototype.ids;
      res = MergedRecordStore.__super__.exportRecords.call(this);
      this.ids = backup;
      return res;
    }
  };

  MergedRecordStore.prototype.ids = function(includeDeleted) {
    var deleted, existing, id, layer, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    if (includeDeleted == null) {
      includeDeleted = false;
    }
    existing = [];
    deleted = [];
    _ref = this._layers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      layer = _ref[_i];
      _ref1 = layer.ids();
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        id = _ref1[_j];
        if (__indexOf.call(deleted, id) < 0 && __indexOf.call(existing, id) < 0) {
          existing.push(id);
        }
      }
      _ref2 = layer.deletedIds();
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        id = _ref2[_k];
        if (__indexOf.call(deleted, id) < 0 && __indexOf.call(existing, id) < 0) {
          deleted.push(id);
        }
      }
    }
    if (includeDeleted) {
      return existing.concat(deleted).sort();
    } else {
      return existing.sort();
    }
  };

  MergedRecordStore.prototype.deletedIds = function() {
    var deleted, existing, id, layer, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    existing = [];
    deleted = [];
    _ref = this._layers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      layer = _ref[_i];
      _ref1 = layer.ids();
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        id = _ref1[_j];
        if (__indexOf.call(deleted, id) < 0 && __indexOf.call(existing, id) < 0) {
          existing.push(id);
        }
      }
      _ref2 = layer.deletedIds();
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        id = _ref2[_k];
        if (__indexOf.call(deleted, id) < 0 && __indexOf.call(existing, id) < 0) {
          deleted.push(id);
        }
      }
    }
    return deleted.sort();
  };

  MergedRecordStore.prototype._read = function(id, keepDeleted) {
    var key, keys, rec, record, records, val, _i, _len;
    if (keepDeleted == null) {
      keepDeleted = false;
    }
    records = this._recordStack(id, keepDeleted);
    rec = records.shift();
    keys = (function() {
      var _results;
      _results = [];
      for (key in rec) {
        if (!__hasProp.call(rec, key)) continue;
        val = rec[key];
        _results.push(key);
      }
      return _results;
    })();
    for (_i = 0, _len = records.length; _i < _len; _i++) {
      record = records[_i];
      for (key in record) {
        if (!__hasProp.call(record, key)) continue;
        val = record[key];
        if (!(__indexOf.call(keys, key) < 0)) {
          continue;
        }
        keys.push(key);
        rec[key] = val;
      }
    }
    return rec;
  };

  MergedRecordStore.prototype._update = function(meta) {
    var d, key, merged, val, _ref;
    merged = this._importRecord(this._read(meta.id));
    _ref = meta.record;
    for (key in _ref) {
      if (!__hasProp.call(_ref, key)) continue;
      val = _ref[key];
      if (key !== 'id') {
        merged.record[key] = val;
      }
    }
    if (this._records.exists(meta.id)) {
      merged.metadata = meta.metadata;
      return MergedRecordStore.__super__._update.call(this, merged);
    } else {
      if ((d = meta.metadata.createdAt)) {
        merged.metadata.createdAt = d;
      }
      merged.metadata.updatedAt = meta.metadata.updatedAt;
      return this._create(merged);
    }
  };

  MergedRecordStore.prototype._delete = function(id, deletedAt) {
    var e, rec;
    if (!this._records.exists(id)) {
      rec = this._read(id);
      e = this._records.deleted(id, deletedAt);
      return this._exportRecord(rec, {
        deletedAt: e.value.deletedAt
      });
    } else {
      return MergedRecordStore.__super__._delete.call(this, id, deletedAt);
    }
  };

  MergedRecordStore.prototype._layersWithRecord = function(id, keepDeleted) {
    var has, layer, res, _i, _len, _ref;
    if (keepDeleted == null) {
      keepDeleted = false;
    }
    this.assertValidId(id);
    res = [];
    _ref = this._layers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      layer = _ref[_i];
      if (!((has = layer.idExists(id, true)))) {
        continue;
      }
      if (has.isDeleted) {
        if (keepDeleted && res.length === 0) {
          res.push(layer);
        }
        break;
      }
      res.push(layer);
    }
    return res;
  };

  MergedRecordStore.prototype._recordStack = function(id, keepDeleted) {
    var layer, _i, _len, _ref, _results;
    if (keepDeleted == null) {
      keepDeleted = false;
    }
    _ref = this._layersWithRecord(id, keepDeleted);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      layer = _ref[_i];
      _results.push(layer._read(id, keepDeleted));
    }
    return _results;
  };

  return MergedRecordStore;

})(RecordStore);

module.exports = Class = MergedRecordStore;
